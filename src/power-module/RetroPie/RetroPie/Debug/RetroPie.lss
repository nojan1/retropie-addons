
RetroPie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000002d6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003df  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000267  00000000  00000000  0000075d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029a  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000012c  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001df  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f9  00000000  00000000  00000f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  88:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <HandleFan>:
#include "fan.h"

//#include <util/delay.h>
//
//unsigned char crap = 0;
void HandleFan(unsigned char temperature){
  90:	08 95       	ret

00000092 <__vector_21>:
#include <util/delay.h>

unsigned char waitCounter = 0;

ISR (ADC_vect) 
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	//ADC Conversion completed - temp reading in ADCL
	HandleFan(ADCL);
  b4:	80 91 78 00 	lds	r24, 0x0078
  b8:	0e 94 48 00 	call	0x90	; 0x90 <HandleFan>
}
  bc:	ff 91       	pop	r31
  be:	ef 91       	pop	r30
  c0:	bf 91       	pop	r27
  c2:	af 91       	pop	r26
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	7f 91       	pop	r23
  ca:	6f 91       	pop	r22
  cc:	5f 91       	pop	r21
  ce:	4f 91       	pop	r20
  d0:	3f 91       	pop	r19
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_4>:

ISR (PCINT1_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	83 ed       	ldi	r24, 0xD3	; 211
 102:	90 e3       	ldi	r25, 0x30	; 48
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <__vector_4+0x26>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__vector_4+0x2c>
 10a:	00 00       	nop
	//PWR Switch or raspberry pie sense
	_delay_ms(50);

	if( PINC & (1 << PWR_SWITCH) ){
 10c:	33 9b       	sbis	0x06, 3	; 6
 10e:	11 c0       	rjmp	.+34     	; 0x132 <__vector_4+0x54>
		//PWR Switch clicked
		switch(GetState()){
 110:	0e 94 2b 01 	call	0x256	; 0x256 <GetState>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	91 05       	cpc	r25, r1
 118:	39 f0       	breq	.+14     	; 0x128 <__vector_4+0x4a>
 11a:	04 97       	sbiw	r24, 0x04	; 4
 11c:	d9 f4       	brne	.+54     	; 0x154 <__vector_4+0x76>
			case OFF:
				SetState(BOOTING);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 0e 01 	call	0x21c	; 0x21c <SetState>
			break;
 126:	16 c0       	rjmp	.+44     	; 0x154 <__vector_4+0x76>
			case RUNNING:
				SetState(SHUTTING_DOWN);
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 0e 01 	call	0x21c	; 0x21c <SetState>
			break;
 130:	11 c0       	rjmp	.+34     	; 0x154 <__vector_4+0x76>
		
		return;
	}
	
	//PIE_SENSE went high
	if((PINC & (~(1 << PIE_SENSE))) && waitCounter > 20 && GetState() == BOOTING){
 132:	86 b1       	in	r24, 0x06	; 6
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	71 f0       	breq	.+28     	; 0x154 <__vector_4+0x76>
 138:	80 91 00 01 	lds	r24, 0x0100
 13c:	85 31       	cpi	r24, 0x15	; 21
 13e:	50 f0       	brcs	.+20     	; 0x154 <__vector_4+0x76>
 140:	0e 94 2b 01 	call	0x256	; 0x256 <GetState>
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	31 f4       	brne	.+12     	; 0x154 <__vector_4+0x76>
		waitCounter = 0;
 148:	10 92 00 01 	sts	0x0100, r1
		SetState(RUNNING);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 0e 01 	call	0x21c	; 0x21c <SetState>
	//if( !(PINC & (~(1 << PIE_SENSE))) && waitCounter > 10 && GetState() == SHUTTING_DOWN){
		//waitCounter = 0;
		////Raspberry switched off
		//SetState(OFF);
	//}
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <main>:

int main(void)
{
	//Select channel 4
	ADMUX |= (1 << MUX2);
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	80 83       	st	Z, r24
	//Enable ADC, Start Conversion, Enable interrupt, Prescale = 64
	ADCSRA = 0b11101110;
 180:	8e ee       	ldi	r24, 0xEE	; 238
 182:	80 93 7a 00 	sts	0x007A, r24
	//Set free running ADC	
	ADCSRB |= (0 << 3);
 186:	eb e7       	ldi	r30, 0x7B	; 123
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 83       	st	Z, r24

	//Fast PWM mode, set OC0A at bottom clear at match, Prescal = 64
	TCCR0A |= (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);
 18e:	84 b5       	in	r24, 0x24	; 36
 190:	83 68       	ori	r24, 0x83	; 131
 192:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02) | (1 << CS01) | (1 << CS00);
 194:	85 b5       	in	r24, 0x25	; 37
 196:	8b 60       	ori	r24, 0x0B	; 11
 198:	85 bd       	out	0x25, r24	; 37

	//Data pins	
	DDRC = (1 << PIE_SIGNAL) |
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	87 b9       	out	0x07, r24	; 7
			(0 << PIE_SENSE) |
			(1 << PWR_RELAY) |
			(0 << PWR_SWITCH);
	
	//Port D = Output
	DDRD = 0xff;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	8a b9       	out	0x0a, r24	; 10
	
	//Turn of LED's
	//PORTD |= (0b1111 << LED1);
	PORTD = 0xff;
 1a2:	8b b9       	out	0x0b, r24	; 11
	
	//Enable PCINT[14:8] interrupt
	PCICR |= (1 << PCIE1);
 1a4:	e8 e6       	ldi	r30, 0x68	; 104
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	80 83       	st	Z, r24
	//Enable for PCINT9 and 11
	PCMSK1 |= (1 << PCINT11) | (1 << PCINT9);
 1ae:	ec e6       	ldi	r30, 0x6C	; 108
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8a 60       	ori	r24, 0x0A	; 10
 1b6:	80 83       	st	Z, r24

	
	SetState(OFF);
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 0e 01 	call	0x21c	; 0x21c <SetState>
	
	sei();	
 1c0:	78 94       	sei
	
	unsigned char ledState = 1;
 1c2:	c1 e0       	ldi	r28, 0x01	; 1
    while(1)
    {
        switch(currentState){
			case BOOTING:
			case SHUTTING_DOWN:
				PORTD = 0xff;
 1c4:	df ef       	ldi	r29, 0xFF	; 255
				PORTD &= ~ledState;
			
				ledState = ledState << 1;
				if(ledState > 8)
				ledState = 1;
 1c6:	11 e0       	ldi	r17, 0x01	; 1
	
	unsigned char ledState = 1;
	
    while(1)
    {
        switch(currentState){
 1c8:	80 91 01 01 	lds	r24, 0x0101
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	11 f0       	breq	.+4      	; 0x1d4 <main+0x5e>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	d1 f7       	brne	.-12     	; 0x1c8 <main+0x52>
			case BOOTING:
			case SHUTTING_DOWN:
				PORTD = 0xff;
 1d4:	db b9       	out	0x0b, r29	; 11
				PORTD &= ~ledState;
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	9c 2f       	mov	r25, r28
 1da:	90 95       	com	r25
 1dc:	89 23       	and	r24, r25
 1de:	8b b9       	out	0x0b, r24	; 11
			
				ledState = ledState << 1;
 1e0:	cc 0f       	add	r28, r28
				if(ledState > 8)
 1e2:	c9 30       	cpi	r28, 0x09	; 9
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <main+0x72>
				ledState = 1;
 1e6:	c1 2f       	mov	r28, r17
 1e8:	83 e2       	ldi	r24, 0x23	; 35
 1ea:	94 ef       	ldi	r25, 0xF4	; 244
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x76>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x7c>
 1f2:	00 00       	nop
			
				_delay_ms(250);
				
				waitCounter++;
 1f4:	80 91 00 01 	lds	r24, 0x0100
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 00 01 	sts	0x0100, r24

				//Check if PIE_Sense is low
				if( !(PINC & (1 << PIE_SENSE)) && waitCounter > 10 && GetState() == SHUTTING_DOWN){
 1fe:	31 99       	sbic	0x06, 1	; 6
 200:	e3 cf       	rjmp	.-58     	; 0x1c8 <main+0x52>
 202:	8b 30       	cpi	r24, 0x0B	; 11
 204:	08 f3       	brcs	.-62     	; 0x1c8 <main+0x52>
 206:	0e 94 2b 01 	call	0x256	; 0x256 <GetState>
 20a:	03 97       	sbiw	r24, 0x03	; 3
 20c:	e9 f6       	brne	.-70     	; 0x1c8 <main+0x52>
					waitCounter = 0;
 20e:	10 92 00 01 	sts	0x0100, r1
					//Raspberry switched off
					SetState(OFF);
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 0e 01 	call	0x21c	; 0x21c <SetState>
 21a:	d6 cf       	rjmp	.-84     	; 0x1c8 <main+0x52>

0000021c <SetState>:
#include <util/delay.h>

volatile char currentState = 0;

void SetState(int state){
	currentState = state;
 21c:	80 93 01 01 	sts	0x0101, r24
	switch(state) {
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	91 05       	cpc	r25, r1
 224:	69 f0       	breq	.+26     	; 0x240 <SetState+0x24>
 226:	1c f4       	brge	.+6      	; 0x22e <SetState+0x12>
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	39 f0       	breq	.+14     	; 0x23a <SetState+0x1e>
 22c:	08 95       	ret
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	91 05       	cpc	r25, r1
 232:	51 f0       	breq	.+20     	; 0x248 <SetState+0x2c>
 234:	04 97       	sbiw	r24, 0x04	; 4
 236:	51 f0       	breq	.+20     	; 0x24c <SetState+0x30>
 238:	08 95       	ret
		case BOOTING:
			//Pull relay
			PORTC |= (1 << PWR_RELAY);
 23a:	42 9a       	sbi	0x08, 2	; 8
			//Set PIE Signal high
			PORTC |= (1 << PIE_SIGNAL);
 23c:	40 9a       	sbi	0x08, 0	; 8
		break;
 23e:	08 95       	ret
		case RUNNING:
			//All leds on
			PORTD &= ~((1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4));
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	80 7f       	andi	r24, 0xF0	; 240
 244:	8b b9       	out	0x0b, r24	; 11
		break;
 246:	08 95       	ret
		case SHUTTING_DOWN:
			//Signal PIE to shutdown
			PORTC &= ~(1 << PIE_SIGNAL);
 248:	40 98       	cbi	0x08, 0	; 8
		break;
 24a:	08 95       	ret
		case OFF:
			PORTC &= ~(1 << PWR_RELAY);
 24c:	42 98       	cbi	0x08, 2	; 8
			PORTD |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4);
 24e:	8b b1       	in	r24, 0x0b	; 11
 250:	8f 60       	ori	r24, 0x0F	; 15
 252:	8b b9       	out	0x0b, r24	; 11
 254:	08 95       	ret

00000256 <GetState>:
		break;
	}
}

int GetState(){
	return currentState;
 256:	80 91 01 01 	lds	r24, 0x0101
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
