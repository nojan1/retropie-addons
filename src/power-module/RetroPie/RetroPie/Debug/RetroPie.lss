
RetroPie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000002e6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000418  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000279  00000000  00000000  000007a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a6  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000012c  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000239  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000241  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  88:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <HandleFan>:
  90:	08 95       	ret

00000092 <__vector_21>:
#include <util/delay.h>

unsigned char waitCounter = 0;

ISR (ADC_vect) 
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	//ADC Conversion completed - temp reading in ADCL
	HandleFan(ADCL);
  b4:	80 91 78 00 	lds	r24, 0x0078
  b8:	0e 94 48 00 	call	0x90	; 0x90 <HandleFan>
}
  bc:	ff 91       	pop	r31
  be:	ef 91       	pop	r30
  c0:	bf 91       	pop	r27
  c2:	af 91       	pop	r26
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	7f 91       	pop	r23
  ca:	6f 91       	pop	r22
  cc:	5f 91       	pop	r21
  ce:	4f 91       	pop	r20
  d0:	3f 91       	pop	r19
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_4>:

ISR (PCINT1_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	cli();
 100:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	83 ed       	ldi	r24, 0xD3	; 211
 104:	90 e3       	ldi	r25, 0x30	; 48
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <__vector_4+0x28>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__vector_4+0x2e>
 10c:	00 00       	nop
	//PWR Switch or raspberry pie sense
	_delay_ms(50);

	if( PINC & (1 << PWR_SWITCH) ){
 10e:	33 9b       	sbis	0x06, 3	; 6
 110:	17 c0       	rjmp	.+46     	; 0x140 <__vector_4+0x62>
		//PWR Switch clicked
		switch(GetState()){
 112:	0e 94 33 01 	call	0x266	; 0x266 <GetState>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	91 05       	cpc	r25, r1
 11a:	69 f0       	breq	.+26     	; 0x136 <__vector_4+0x58>
 11c:	04 97       	sbiw	r24, 0x04	; 4
 11e:	11 f5       	brne	.+68     	; 0x164 <__vector_4+0x86>
			case OFF:
				SetState(BOOTING);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 16 01 	call	0x22c	; 0x22c <SetState>
 128:	87 ea       	ldi	r24, 0xA7	; 167
 12a:	91 e6       	ldi	r25, 0x61	; 97
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <__vector_4+0x4e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <__vector_4+0x54>
 132:	00 00       	nop
 134:	17 c0       	rjmp	.+46     	; 0x164 <__vector_4+0x86>
				_delay_ms(100);
			break;
			case RUNNING:
				SetState(SHUTTING_DOWN);
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 16 01 	call	0x22c	; 0x22c <SetState>
			break;
 13e:	12 c0       	rjmp	.+36     	; 0x164 <__vector_4+0x86>
		
		return;
	}
	
	//PIE_SENSE went high
	if((PINC & (~(1 << PIE_SENSE))) && waitCounter > 20 && GetState() == BOOTING){
 140:	86 b1       	in	r24, 0x06	; 6
 142:	8d 7f       	andi	r24, 0xFD	; 253
 144:	71 f0       	breq	.+28     	; 0x162 <__vector_4+0x84>
 146:	80 91 00 01 	lds	r24, 0x0100
 14a:	85 31       	cpi	r24, 0x15	; 21
 14c:	50 f0       	brcs	.+20     	; 0x162 <__vector_4+0x84>
 14e:	0e 94 33 01 	call	0x266	; 0x266 <GetState>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	31 f4       	brne	.+12     	; 0x162 <__vector_4+0x84>
		waitCounter = 0;
 156:	10 92 00 01 	sts	0x0100, r1
		SetState(RUNNING);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 16 01 	call	0x22c	; 0x22c <SetState>
		//waitCounter = 0;
		////Raspberry switched off
		//SetState(OFF);
	//}
	
	sei();
 162:	78 94       	sei
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	7f 91       	pop	r23
 172:	6f 91       	pop	r22
 174:	5f 91       	pop	r21
 176:	4f 91       	pop	r20
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <main>:

int main(void)
{
	//Select channel 4
	ADMUX |= (1 << MUX2);
 186:	ec e7       	ldi	r30, 0x7C	; 124
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	80 83       	st	Z, r24
	//Enable ADC, Start Conversion, Enable interrupt, Prescale = 64
	ADCSRA = 0b11101110;
 190:	8e ee       	ldi	r24, 0xEE	; 238
 192:	80 93 7a 00 	sts	0x007A, r24
	//Set free running ADC	
	ADCSRB |= (0 << 3);
 196:	eb e7       	ldi	r30, 0x7B	; 123
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 83       	st	Z, r24

	//Fast PWM mode, set OC0A at bottom clear at match, Prescale = 64
	TCCR0A |= (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);
 19e:	84 b5       	in	r24, 0x24	; 36
 1a0:	83 68       	ori	r24, 0x83	; 131
 1a2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02) | (1 << CS01) | (1 << CS00);
 1a4:	85 b5       	in	r24, 0x25	; 37
 1a6:	8b 60       	ori	r24, 0x0B	; 11
 1a8:	85 bd       	out	0x25, r24	; 37

	//Data pins	
	DDRC = (1 << PIE_SIGNAL) |
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	87 b9       	out	0x07, r24	; 7
			(0 << PIE_SENSE) |
			(1 << PWR_RELAY) |
			(0 << PWR_SWITCH);
	
	//Port D = Output
	DDRD = 0xff;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	8a b9       	out	0x0a, r24	; 10
	
	//Turn of LED's
	//PORTD |= (0b1111 << LED1);
	PORTD = 0xff;
 1b2:	8b b9       	out	0x0b, r24	; 11
	
	//Enable PCINT[14:8] interrupt
	PCICR |= (1 << PCIE1);
 1b4:	e8 e6       	ldi	r30, 0x68	; 104
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	80 83       	st	Z, r24
	//Enable for PCINT9 and 11
	PCMSK1 |= (1 << PCINT11) | (1 << PCINT9);
 1be:	ec e6       	ldi	r30, 0x6C	; 108
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	8a 60       	ori	r24, 0x0A	; 10
 1c6:	80 83       	st	Z, r24

	
	SetState(OFF);
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 16 01 	call	0x22c	; 0x22c <SetState>
	
	sei();	
 1d0:	78 94       	sei
	
	unsigned char ledState = 1;
 1d2:	c1 e0       	ldi	r28, 0x01	; 1
    while(1)
    {
        switch(currentState){
			case BOOTING:
			case SHUTTING_DOWN:
				PORTD = 0xff;
 1d4:	df ef       	ldi	r29, 0xFF	; 255
				PORTD &= ~ledState;
			
				ledState = ledState << 1;
				if(ledState > 8){
					ledState = 1;
 1d6:	11 e0       	ldi	r17, 0x01	; 1
	
	unsigned char ledState = 1;
	
    while(1)
    {
        switch(currentState){
 1d8:	80 91 01 01 	lds	r24, 0x0101
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	11 f0       	breq	.+4      	; 0x1e4 <main+0x5e>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	d1 f7       	brne	.-12     	; 0x1d8 <main+0x52>
			case BOOTING:
			case SHUTTING_DOWN:
				PORTD = 0xff;
 1e4:	db b9       	out	0x0b, r29	; 11
				PORTD &= ~ledState;
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	9c 2f       	mov	r25, r28
 1ea:	90 95       	com	r25
 1ec:	89 23       	and	r24, r25
 1ee:	8b b9       	out	0x0b, r24	; 11
			
				ledState = ledState << 1;
 1f0:	cc 0f       	add	r28, r28
				if(ledState > 8){
 1f2:	c9 30       	cpi	r28, 0x09	; 9
 1f4:	08 f0       	brcs	.+2      	; 0x1f8 <main+0x72>
					ledState = 1;
 1f6:	c1 2f       	mov	r28, r17
 1f8:	83 e2       	ldi	r24, 0x23	; 35
 1fa:	94 ef       	ldi	r25, 0xF4	; 244
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x76>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x7c>
 202:	00 00       	nop
				}
			
				_delay_ms(250);
				
				waitCounter++;
 204:	80 91 00 01 	lds	r24, 0x0100
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 00 01 	sts	0x0100, r24

				//Check if PIE_Sense is low
				if( !(PINC & (1 << PIE_SENSE)) && waitCounter > 10 && GetState() == SHUTTING_DOWN){
 20e:	31 99       	sbic	0x06, 1	; 6
 210:	e3 cf       	rjmp	.-58     	; 0x1d8 <main+0x52>
 212:	8b 30       	cpi	r24, 0x0B	; 11
 214:	08 f3       	brcs	.-62     	; 0x1d8 <main+0x52>
 216:	0e 94 33 01 	call	0x266	; 0x266 <GetState>
 21a:	03 97       	sbiw	r24, 0x03	; 3
 21c:	e9 f6       	brne	.-70     	; 0x1d8 <main+0x52>
					waitCounter = 0;
 21e:	10 92 00 01 	sts	0x0100, r1
					//Raspberry switched off
					SetState(OFF);
 222:	84 e0       	ldi	r24, 0x04	; 4
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 16 01 	call	0x22c	; 0x22c <SetState>
 22a:	d6 cf       	rjmp	.-84     	; 0x1d8 <main+0x52>

0000022c <SetState>:
 22c:	80 93 01 01 	sts	0x0101, r24
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	91 05       	cpc	r25, r1
 234:	69 f0       	breq	.+26     	; 0x250 <SetState+0x24>
 236:	1c f4       	brge	.+6      	; 0x23e <SetState+0x12>
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	39 f0       	breq	.+14     	; 0x24a <SetState+0x1e>
 23c:	08 95       	ret
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	91 05       	cpc	r25, r1
 242:	51 f0       	breq	.+20     	; 0x258 <SetState+0x2c>
 244:	04 97       	sbiw	r24, 0x04	; 4
 246:	51 f0       	breq	.+20     	; 0x25c <SetState+0x30>
 248:	08 95       	ret
 24a:	42 9a       	sbi	0x08, 2	; 8
 24c:	40 9a       	sbi	0x08, 0	; 8
 24e:	08 95       	ret
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	80 7f       	andi	r24, 0xF0	; 240
 254:	8b b9       	out	0x0b, r24	; 11
 256:	08 95       	ret
 258:	40 98       	cbi	0x08, 0	; 8
 25a:	08 95       	ret
 25c:	42 98       	cbi	0x08, 2	; 8
 25e:	8b b1       	in	r24, 0x0b	; 11
 260:	8f 60       	ori	r24, 0x0F	; 15
 262:	8b b9       	out	0x0b, r24	; 11
 264:	08 95       	ret

00000266 <GetState>:
 266:	80 91 01 01 	lds	r24, 0x0101
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	08 95       	ret

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
