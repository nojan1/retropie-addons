
RetroPie-Basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001fb  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000109  00000000  00000000  000003dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000017b  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b9  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000222  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00000a63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
const int SHORT_CLICK = 3;

int main(void)
{
	//Data pins
	DDRC = (1 << PIE_SIGNAL) |
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	87 b9       	out	0x07, r24	; 7
	(0 << PIE_SENSE) |
	(1 << PWR_RELAY) |
	(0 << PWR_SWITCH);
	
	//Port D = Output
	DDRD = 0xff;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a b9       	out	0x0a, r24	; 10
	
	//Turn of LED's
	//PORTD |= (0b1111 << LED1);
	PORTD = 0xff;
  9e:	8b b9       	out	0x0b, r24	; 11
	
	unsigned char powerbuttonDownCounter = 0;
	unsigned char isRunning = 0;
  a0:	30 e0       	ldi	r19, 0x00	; 0
	
    while(1)
    {
        //Check power button
        powerbuttonDownCounter = 0;
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	24 2f       	mov	r18, r20
				
				PORTD |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4);
				_delay_ms(200);
			}else{
				isRunning = 1;
				PORTC |= (1 << PWR_RELAY);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	50 e0       	ldi	r21, 0x00	; 0
				PORTC &= ~(1 << PWR_RELAY);
				
				PORTD |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4);
				_delay_ms(200);
			}else{
				isRunning = 1;
  aa:	71 e0       	ldi	r23, 0x01	; 1
	unsigned char isRunning = 0;
	
    while(1)
    {
        //Check power button
        powerbuttonDownCounter = 0;
  ac:	84 2f       	mov	r24, r20
  ae:	09 c0       	rjmp	.+18     	; 0xc2 <main+0x2c>
        while(PINC & (1 << PWR_SWITCH))
        {
	        powerbuttonDownCounter++;
  b0:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	e7 e8       	ldi	r30, 0x87	; 135
  b4:	f3 e1       	ldi	r31, 0x13	; 19
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x20>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x26>
  bc:	00 00       	nop
  be:	01 c0       	rjmp	.+2      	; 0xc2 <main+0x2c>
	unsigned char isRunning = 0;
	
    while(1)
    {
        //Check power button
        powerbuttonDownCounter = 0;
  c0:	82 2f       	mov	r24, r18
        while(PINC & (1 << PWR_SWITCH))
  c2:	33 99       	sbic	0x06, 3	; 6
  c4:	f5 cf       	rjmp	.-22     	; 0xb0 <main+0x1a>
        {
	        powerbuttonDownCounter++;
	        _delay_ms(20);
        }
		
		if(powerbuttonDownCounter >= SHORT_CLICK)
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	03 97       	sbiw	r24, 0x03	; 3
  ca:	d4 f3       	brlt	.-12     	; 0xc0 <main+0x2a>
		{
			if(isRunning == 1){
  cc:	31 30       	cpi	r19, 0x01	; 1
  ce:	61 f4       	brne	.+24     	; 0xe8 <main+0x52>
				isRunning = 0;
				PORTC &= ~(1 << PWR_RELAY);
  d0:	42 98       	cbi	0x08, 2	; 8
				
				PORTD |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4);
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	8f 60       	ori	r24, 0x0F	; 15
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	93 ec       	ldi	r25, 0xC3	; 195
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x46>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x4c>
  e2:	00 00       	nop
        }
		
		if(powerbuttonDownCounter >= SHORT_CLICK)
		{
			if(isRunning == 1){
				isRunning = 0;
  e4:	34 2f       	mov	r19, r20
  e6:	e2 cf       	rjmp	.-60     	; 0xac <main+0x16>
				
				PORTD |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4);
				_delay_ms(200);
			}else{
				isRunning = 1;
				PORTC |= (1 << PWR_RELAY);
  e8:	42 9a       	sbi	0x08, 2	; 8
  ea:	86 2f       	mov	r24, r22
  ec:	95 2f       	mov	r25, r21
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <main+0x5c>
  f0:	01 96       	adiw	r24, 0x01	; 1
				
				for(int i = 0; i < 5; i++){
					PORTD |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4);
  f2:	3b b1       	in	r19, 0x0b	; 11
  f4:	3f 60       	ori	r19, 0x0F	; 15
  f6:	3b b9       	out	0x0b, r19	; 11
					if(i != 0){
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 05       	cpc	r25, r1
  fc:	a1 f0       	breq	.+40     	; 0x126 <main+0x90>
  fe:	e7 ea       	ldi	r30, 0xA7	; 167
 100:	f1 e6       	ldi	r31, 0x61	; 97
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x6c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x72>
 108:	00 00       	nop
						_delay_ms(100);
					}
					
					PORTD &= ~((1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4));
 10a:	3b b1       	in	r19, 0x0b	; 11
 10c:	30 7f       	andi	r19, 0xF0	; 240
 10e:	3b b9       	out	0x0b, r19	; 11
 110:	e7 ea       	ldi	r30, 0xA7	; 167
 112:	f1 e6       	ldi	r31, 0x61	; 97
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x7e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x84>
 11a:	00 00       	nop
				_delay_ms(200);
			}else{
				isRunning = 1;
				PORTC |= (1 << PWR_RELAY);
				
				for(int i = 0; i < 5; i++){
 11c:	85 30       	cpi	r24, 0x05	; 5
 11e:	91 05       	cpc	r25, r1
 120:	3c f3       	brlt	.-50     	; 0xf0 <main+0x5a>
				PORTC &= ~(1 << PWR_RELAY);
				
				PORTD |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4);
				_delay_ms(200);
			}else{
				isRunning = 1;
 122:	37 2f       	mov	r19, r23
 124:	c3 cf       	rjmp	.-122    	; 0xac <main+0x16>
					PORTD |= (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4);
					if(i != 0){
						_delay_ms(100);
					}
					
					PORTD &= ~((1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4));
 126:	3b b1       	in	r19, 0x0b	; 11
 128:	30 7f       	andi	r19, 0xF0	; 240
 12a:	3b b9       	out	0x0b, r19	; 11
 12c:	e7 ea       	ldi	r30, 0xA7	; 167
 12e:	f1 e6       	ldi	r31, 0x61	; 97
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x9a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xa0>
 136:	00 00       	nop
 138:	db cf       	rjmp	.-74     	; 0xf0 <main+0x5a>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
